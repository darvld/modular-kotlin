package=modular.kotlin.interop

compilerOpts.mingw= -D_WIN
---
#include <stdlib.h>

#ifdef _WIN
intptr_t loadLibrary(const char *path){
    return LoadLibraryExA(path, NULL,0);
}

intptr_t loadFunction(intptr_t library, const char *name){
    return GetProcAddress(library, name);
}

int unloadLibrary(intptr_t library){
    return FreeLibrary(library);
}
#else
 TODO: Implement POSIX library handling
#endif

/**A very simple struct, used to exchange data between modules.
*
* Messages are used by Channels as a basic data cell.
* Usually, the [code] field carries contextual information (kind of like HTTP codes), while the content pointer
* holds the real data.*/
typedef struct {
    int code;

    int size;
    void *content
} MessageData;

/**The prototype for a message handler function*/
typedef MessageData* (*ChannelEventHandler)(void *data, MessageData *message);

/**Strutcure holding the data for a Channel.
*
* The receiving end of the Channel sets the handler and the data pointer to match its implementation.*/
typedef struct {
    MessageData* (*handler)(void *data, MessageData *message);
    void *data;
} ChannelData;